from django.http import HttpResponse,HttpResponseRedirect
from .models import Question, Choice
from django.shortcuts import render, get_object_or_404
from django.urls import reverse
from django.db.models import F
from django.views import generic
from django.utils import timezone

# Create your views here. oversight the questions
class IndexView(generic.ListView):
    template_name = "polls/index.html"
    # change context object name
    context_object_name = "latest_question_list"

    def get_queryset(self):
        """ Return the last five published questions """
        return Question.objects.filter(pub_date__lte=timezone.now()).order_by("-pub_date")[:5]
    
# form with question and choices
class DetailView(generic.DetailView):
    
    # it knows the receives a pk with the question_id
    # and use the correspondent model called Question
    # the variable name of context is called 'question'
    model = Question
    #template_name = "polls/detail.html"

    # it only receives one question by id
    # in queryset filter only past questions
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet
        """
        return Question.objects.filter(pub_date__lte=timezone.now())


# list of question with their choices and votes)
class ResultsView(generic.DetailView):
    model = Question
    #use an specific template if you don't it use autogenerated called polls/question_detail.html
    #template_name = "polls/results.html"

def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST["choice"])
    except (KeyError, Choice.DoesNotExist):
        return render(
            request,
            "polls/detail.html",
            {
                "question": question,
                "error_message": "You didn't select a choice",
            },
        )
    else:
        #selected_choice.votes += 1
        #selected_choice.save()

        #selected_choice.object.update(votes=F("votes") + 1)
        selected_choice.votes = F("votes") + 1
        selected_choice.save()

        return HttpResponseRedirect(reverse("polls:results", args=(question.id,)))
